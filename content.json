{"meta":{"title":"Pologue","subtitle":"","description":"Personal blog site, may include technical articles or musings.","author":"Pologue","url":"http://pologue.github.io","root":"/"},"pages":[{"title":"Archives","date":"2024-03-07T09:41:14.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"archives/index.html","permalink":"http://pologue.github.io/archives/index.html","excerpt":"","text":""},{"title":"Categories","date":"2024-03-07T09:41:12.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"categories/index.html","permalink":"http://pologue.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2024-03-07T09:40:52.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"tags/index.html","permalink":"http://pologue.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"WSL2 wslg problem","slug":"WSL2-wslg-problem","date":"2025-06-29T12:18:48.000Z","updated":"2025-06-29T12:30:08.943Z","comments":true,"path":"2025/06/29/WSL2-wslg-problem/","permalink":"http://pologue.github.io/2025/06/29/WSL2-wslg-problem/","excerpt":"","text":"WSL2中，默认支持WSLg，可以直接打开GUI应用。但是缩放率比较小。我的WSL不知道从什么时候起突然有了毛病，再也打不开GUI应用，安装新的distro也是一样的cannot open display，大概是动了哪里的配置吧，没有自动创建WSLg的软链接。 参考 确认Windows版本 From a Windows command prompt, type ver to verify which build you are running. 12&gt;E:\\wsl&gt;ver&gt;Microsoft Windows [版本 10.0.26100.4349] You must be running on Windows build version 21364+ for WSLg to work. This version of Windows is currently only available through the Windows Insider program. See https://insider.windows.com/en-us/ to join the insider program and help us validate pre-released version of Windows. Windows11一般都是支持WSLg的吧。 DISPLAY环境变量 WSLg's X server is running on display 0. The DISPLAY environment variable must have the value :0 for GUI application to connect to the right display. You can verify what the value of your DISPLAY environment variable is per below. 12&gt;name@hostname:~$ echo $DISPLAY&gt;:0 This environment variable is initialize as part of WSL's INIT. If it is unset or has a value other than :0, than you likely have a profile script that is changing it's value that you'll want to hunt down. You can also reset that environment variable like below. 1&gt;export DISPLAY=:0 有些教程的说法是export主机ip，但是对我的情况没什么作用。 X11 display socket X servers create their socket under /tmp/.X11-Unix. This directory must exist and must be linked to /mnt/wslg/.X11-Unix where WSLg built-in X server create it's socket. You can verify the mapping exist and is the expected link per below. 12&gt;name@hostname:~$ ls -la /tmp/.X11-unix&gt;lrwxrwxrwx 1 name name 19 Apr 21 15:28 /tmp/.X11-unix -&gt; /mnt/wslg/.X11-unix This link is setup during WSL's INIT. If this directory doesn't exist, something likely caused it be removed in your environment that needs to be tracked down. You can re-create the link manually to try things out. 12&gt;sudo rm -r /tmp/.X11-unix&gt;ln -s /mnt/wslg/.X11-unix /tmp/.X11-unix X11 server running? If the X server is running, you should see an X0 socket 12&gt;name@hostname:~$ ls /tmp/.X11-unix&gt;X0 If you don't please open an issue and attach /mnt/wslg/weston.log to the bug. Known issues You can verify the version of WSLg you are running per below: 1234567&gt;name@hostname:~$ cat /mnt/wslg/versions.txt&gt;WSLg ( x86_64 ): 1.0.17+3.Branch.master.Sha.a526dfd5ad03d126bb2d8c528f6c3563e86a40da&gt;Mariner: VERSION=&quot;1.0.20210224&quot;&gt;FreeRDP: e4a2fc2053bd8c5f99455fcd08ffee7e5591567a&gt;weston: fd961f5cd116c9358d82ce94d139c1578e21bd00&gt;pulseaudio: 2f0f0b8c3872780f15e275fc12899f4564f01bd5&gt;mesa: Complex monitor arrangement (Fixed in WSLg 1.0.19) There is a known issue in WSLg 1.0.17 that if you have a combination of vertically and horizontally aligned monitor, Weston may hit an invalid assert and restart. Effectively crashing and restarting the X server on every connection attempt. You can verify if this is what you are hitting per below 1&gt;cat /mnt/wslg/weston.log | grep isConnected_V if you see something like 1&gt;weston: ../libweston/backend-rdp/rdpdisp.c:481: disp_monitor_validate_and_compute_layout: Assertion `isConnected_V == true&#x27; failed. Then you are hitting this problem. The workaround at the moment is to stack all of your monitor either vertically, or horizontally, but not use a mix of both. Setting /tmp in /etc/fstab There is a known issue at the moment (https://github.com/microsoft/wslg/issues/43) where configuring /tmp in /etc/fstab will overwrite the /tmp/.X11-unix link previously described. The workaround at the moment is to either avoid configuring /tmp, or manually recreating the link 1&gt;ln -s /mnt/wslg/.X11-unix /tmp/.X11-unix Still having a problem? Please open an issue and include the following Run the following command and provide the output: 12345678910111213141516171819&gt;spronovo@OFFICE:~$ cat /mnt/wslg/versions.txt&gt;WSLg ( x86_64 ): &lt;current&gt;&gt;Mariner: VERSION=&quot;1.0.20210224&quot;&gt;FreeRDP: 5f083fa0b97d433d6204985f6047886e29c1c61e&gt;weston: 16de531f00aa3dfd17e0de74c8f49e9fd7cec617&gt;pulseaudio: 2f0f0b8c3872780f15e275fc12899f4564f01bd5&gt;mesa: 2ad0684038f5732f7e4bd1a391ec9d833685fb48&gt;spronovo@OFFICE:~$ echo $DISPLAY&gt;:0&gt;spronovo@OFFICE:~$ ls -la /tmp/.X11-unix&gt;lrwxrwxrwx 1 root root 19 Apr 21 12:12 /tmp/.X11-unix -&gt; /mnt/wslg/.X11-unix&gt;spronovo@OFFICE:~$ ls -la /tmp/.X11-unix/&gt;total 0&gt;drwxrwxrwx 2 root root 60 Apr 21 12:22 .&gt;drwxrwxrwt 5 root root 220 Apr 21 12:22 ..&gt;srwxrwxrwx 1 spronovo users 0 Apr 21 12:22 X0 Attach your /mnt/wslg/weston.log file","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://pologue.github.io/tags/Linux/"},{"name":"WSL","slug":"WSL","permalink":"http://pologue.github.io/tags/WSL/"},{"name":"WSLg","slug":"WSLg","permalink":"http://pologue.github.io/tags/WSLg/"}]},{"title":"Typora授权解密(上)——初识AES-256加密算法","slug":"Typora授权解密上——初识AES-256加密算法","date":"2024-11-19T08:52:52.000Z","updated":"2024-11-19T09:19:30.700Z","comments":true,"path":"2024/11/19/Typora授权解密上——初识AES-256加密算法/","permalink":"http://pologue.github.io/2024/11/19/Typora%E6%8E%88%E6%9D%83%E8%A7%A3%E5%AF%86%E4%B8%8A%E2%80%94%E2%80%94%E5%88%9D%E8%AF%86AES-256%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/","excerpt":"","text":"动机 其实很久之前就有逆向Typora的打算了，但是苦于当时找到的网上的教程不是非常细致，很多地方都看不懂是在干嘛，所以一直没有进度。虽然这学期还是有各种长线的大作业吊着，近期也有编译原理和英语听说两个临近deadline的作业，但我还是忍不住干了，尤其是已经看了新找到的一些教程后。趁记忆消退前，成功后先记下来。 在新电脑上通过修改注册表得到的(实际只记得移动了安装的位置)Typora的无限试用期重置了，今天(2024年11月17日)刚好只剩1天，也是折腾这个的理由。本来想用Typora作为英语听说present的准备的编辑器，也是理由。 过程 背景知识 Typora采用的框架是Electron。 调试它的可执行文件还是得用上反汇编软件，例如IDA。 asar是一种打包方式，可以直接用nodejs的asar提取出来，没有加密。 AES是一种块加密，也就是把明文划分成相同大小的块再进行加密，加密用的密钥叫key。AES-128、192、256用到的key长度分别是16byte、24byte、32byte。这里Typora用到的是AES-256，所以key的长度是32byte。12 aes_detials aes_enc_dec AES加密和解密会分别用到两个256byte的矩阵，叫SBox和InvBox。它们的值是固定的，所以可以通过IDA的FindCrypt插件找出来。 块加密有不同的模式，有CBC、ECB、CFB等等。其中ECB是每个明文块分别加密；CBC和CFB是把上一块的密文和当前块的明文做异或后再加密，区别是它们俩明文与密文做异或的时机不一样。在这里Typora用的是CBC模式。3 BlockCipherModesofOperation CBC这种加密方式需要在第一个加密的周期前面再加一个初始的“与明文做异或”的块，就叫iv(initial vector)。因为AES的块是一个4x4的格子，长度为16byte，所以iv的长度就是16byte。 整体介绍 Typora通过app.asar里的main.node模块(实际为dll动态链接库文件)加载atom.js中关于验证license的代码，atom.js通过AES-256加密后用base64编码，以密文的形式存储。解密的过程就发生在main.node中。45 破解的思路是找到AES加密的key和iv，修改解密出来的验证license的代码，再将修改过的代码加密，替换掉原来的atom.js，再重新打包。所以整个过程大概可以分成两个部分：AES解密和patch JavaScript代码。因为不太熟悉后面这部分，估计还得花点时间搞，所以我打算下次再写。 听说还有一种更方便的方法是hook，不过我还没怎么搞明白。 文件结构 在Typora的安装路径下，有Typora.exe可执行文件，它会使用resources/app.asar.unpacked中的main.node来动态加载app.asar，再解密里面的atom.js。我们自己打开app.asar后里面会3个文件，其他两个都不用管，重点关注这个atom.js就好了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748Typora➜ tree -L 3.├── chrome_100_percent.pak├── chrome_200_percent.pak├── d3dcompiler_47.dll├── DO NOT ADD FILES HERE├── ffmpeg.dll├── icudtl.dat├── libEGL.dll├── libGLESv2.dll├── LICENSE├── LICENSES.chromium.html├── locales│ ├── uk.pak| ...│ ├── zh-CN.pak│ └── zh-TW.pak├── resources│ ├── app.asar│ ├── app.asar.unpacked| | └── main.node│ ├── appsrc│ ├── assets│ ├── conf.default.json│ ├── Docs│ ├── DO NOT ADD FILES HERE│ ├── html│ ├── lib.asar│ ├── locales│ ├── node_modules│ ├── node_modules.asar│ ├── package.json│ ├── page-dist│ ├── style│ ├── updater│ └── window.html├── resources.pak├── snapshot_blob.bin├── Typora.exe├── Typora.VisualElementsManifest.xml├── unins000.dat├── unins000.exe├── v8_context_snapshot.bin├── version├── vk_swiftshader.dll├── vk_swiftshader_icd.json└── vulkan-1.dll 听说这个“chrome_100_percent.pak”“chrome_200_percent.pak”是Electron框架的一个特征。6 简单提取一下：npx asar extract app.asar app.asar.manual 123456Typora/resources/app.asar.manual➜ tree.├── atom.js├── main.node└── package.json 步骤 通过IDA打开main.node。IDA会自动识别文件类型，然后自动勾选一些选项。 ida_open Shift+F12打开字符串搜索，找到“./atom.js”，双击点进去，F5自动生成伪代码，估计就是用这个函数加载的密文。把函数名“sub_xxxx”改成“load_atomjs”这种方便理解的名字。点击函数名，按N即可修改，后面分析伪代码修改变量名也是这样。 ida_strings ida_load_atomjs ida_load_atomjs_asm Ctrl+Alt+F使用FindCrypt插件，或者在工具栏Edit/Plugins/下点开，可以找到两个RijinDaelSBox和InvBox。第二个IDA的识别有一点错误，把后面的不相干的数据也划成InvBox的了，小键盘*修改Array的大小为256byte。我们要找解密的过程，所以要找用了InvBox的函数。双击InvBox进去，可以把函数重命名为“load_invbox”。右边分号后面的是汇编代码的注释，可以看到“DATA XREF: sub_xxxx”，这是IDA自动生成的，代表IDA找到的引用了这个数据的函数，可以双击点进去。 ida_findcrypt ida_invbox 在汇编代码窗口按X查看当前函数的交叉引用，工具栏View/Graphs可以查看调用当前函数和当前函数调用的关系图。可以看到重命名后IDA自动把单纯调用“load_invbox”的函数命名为了“j_load_invbox”。 ida_xref “load_invbox”函数的伪代码的结构很像AES解密的流程7，我们把其中的循环结构标记出来后就更清晰了。将伪代码中无意义的v1、v2的变量名重命名为有实际意义的变量名，以及通过/添加注释，可以降低理解代码的难度。 ida_load_invbox 找到表示密文的变量并重命名，下断点，动态调试，双击变量名。右键调试窗口的hex子窗口，synchronized with汇编窗口，再取消同步，多走几步可以看到数据一行一行地变为“require…”开头的明文。因为AES-256的key在做key expansion的时候，头两轮的key分别是原key的前后两段；而在解密中这两段key会用在最后两次AddRoundKey中。因为第一次找的时候我没找到key具体存放在哪里，所以我们可以异或密文和明文得到key来曲线救国。 ida_debug 在旧版的Typora中，iv就是密文的前16byte，在1.9.5中已经不是了。奈何我实在没看懂iv到底是在哪里，所以我就求助于比较新的教程8910，把教程中标注为iv的变量标注为iv，动态调试得到它的值。 在CyberChef中选择cbc模式解密失败，选择cbc/no padding模式成功了，但是明文的末尾有一串非ascii字符串。我猜测是CyberChef自动去除padding时不能判断哪里是padding。 其他 IDA的颜色 1,2两篇教程的ida的theme都设置成了护眼的黑色，而非默认的米黄色，第2篇米黄色背景的软件是x64dbg CyberChef 第1篇教程保存按钮的软件是notepad++，两篇都用到了CyberChef（BAKE！） 参考链接 高级加密标准Wiki↩︎ CTF Wiki AES↩︎ Block cipher mode of operation Wiki↩︎ [原创] Typora 授权解密与剖析↩︎ [原创] Typora 1.0.4版本破解复现↩︎ Electron程序逆向（asar归档解包）↩︎ 从零实现 AES 加密算法↩︎ [原创]Typora 破解 之 逆向分析（上）↩︎ Typora破解复现↩︎ [原创]【最新】Typora最新版的逆向过程分析↩︎","categories":[{"name":"Crypto","slug":"Crypto","permalink":"http://pologue.github.io/categories/Crypto/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"http://pologue.github.io/tags/Typora/"},{"name":"IDA","slug":"IDA","permalink":"http://pologue.github.io/tags/IDA/"},{"name":"AES","slug":"AES","permalink":"http://pologue.github.io/tags/AES/"}]},{"title":"在VMware中通过proxychains使用宿主机的代理","slug":"在VMware中通过proxychains使用宿主机的代理","date":"2024-10-23T15:32:41.000Z","updated":"2024-10-23T15:32:41.681Z","comments":true,"path":"2024/10/23/在VMware中通过proxychains使用宿主机的代理/","permalink":"http://pologue.github.io/2024/10/23/%E5%9C%A8VMware%E4%B8%AD%E9%80%9A%E8%BF%87proxychains%E4%BD%BF%E7%94%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BB%A3%E7%90%86/","excerpt":"","text":"背景 想用VMware里的Kali跑一下数图的一篇论文的项目EAGLE, 因为在WSL上尝试配了一下环境, 但是conda env create -f environment.yml的报错里有一个windows_support.py, 所以我 怀疑是什么东西把WSL当成了Windows. (现在在VMware里搞完了, 报错跟之前的一摸一样, 首先都是一个找不到libffi.so.6, 但是symlink到libffi.so.8.1.2在跑 download_dataset.py时又会报IOT的什么错) 但是虚拟机里没装代理, conda的速度非常慢, create env的时候直接结束了, 没有成功创 建. 代理软件更新后, 我没有打开允许局域网连接. 浏览器可以通过代理上网, 但我没有 找到配置系统代理的设置界面(像Ubuntu那种). proxychains 在网上随便找一篇proxychains的教程都可以, 过程就是在/etc/proxychains.conf中把 strict_chain禁用, 把dynamic_chain启用, 再在最后加入形如\"socks5 xxxx xxxx\"的一句 . 使用proxychains firefox确实有效果. 但是proxychains ping xxx没有用. 还有比较麻烦的一点是设置的代理ip要到宿主机上面看一眼, 再手动修改.","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://pologue.github.io/tags/Linux/"},{"name":"VMware","slug":"VMware","permalink":"http://pologue.github.io/tags/VMware/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-10-10T14:01:29.635Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/10/10/hello-world/","permalink":"http://pologue.github.io/2024/10/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"node.js版本管理和内存溢出","slug":"node-js版本管理和内存溢出","date":"2024-08-16T14:30:33.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/08/16/node-js版本管理和内存溢出/","permalink":"http://pologue.github.io/2024/08/16/node-js%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/","excerpt":"","text":"版本管理 在 WSL 上，我用 n 管理 node 版本；在 Win 上，我用 nvm 管理 node。如果用 nvm 要重新给全局的 node_module 设置环境变量，因为 nvm 会把它删掉😵 sudo n latest 会很慢，下载到 40% 左右就会断掉，因为它不会走代理 sudo -E n latest 就很快，像喝水一样 目前我的 WSL 可以正常走 Win 的代理，git 一般没问题。不过配置的过程断断续续的，我没有记下来，可能只是在 %USERPROFILE%\\.wslconfig 里加了 networkingMode=mirrored 和 autoProxy=true build 内存溢出 build Open-WebUI 的时候，出现了如下报错： 123456789101112131415161718192021222324rendering chunks (179)...&lt;--- Last few GCs ---&gt;[34877:0x76335a0] 48848 ms: Scavenge 2020.6 (2076.4) -&gt; 2019.7 (2086.2) MB, 14.60 / 0.00 ms (average mu = 0.663, current mu = 0.876) allocation failure; [34877:0x76335a0] 48892 ms: Scavenge 2027.0 (2086.6) -&gt; 2024.4 (2087.2) MB, 15.86 / 0.00 ms (average mu = 0.663, current mu = 0.876) allocation failure; [34877:0x76335a0] 48952 ms: Scavenge 2028.3 (2087.6) -&gt; 2026.5 (2106.6) MB, 42.90 / 0.00 ms (average mu = 0.663, current mu = 0.876) allocation failure; &lt;--- JS stacktrace ---&gt;FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory----- Native stack trace ----- 1: 0xcc08f6 node::OOMErrorHandler(char const*, v8::OOMDetails const&amp;) [node] 2: 0x1054130 v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) [node] 3: 0x1054417 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, v8::OOMDetails const&amp;) [node] 4: 0x1273655 [node] 5: 0x128a178 [node] 6: 0x126167e v8::internal::HeapAllocator::AllocateRawWithLightRetrySlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node] 7: 0x1262964 v8::internal::HeapAllocator::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node] 8: 0x1240625 v8::internal::Factory::NewFillerObject(int, v8::internal::AllocationAlignment, v8::internal::AllocationType, v8::internal::AllocationOrigin) [node] 9: 0x1670bec v8::internal::Runtime_AllocateInYoungGeneration(int, unsigned long*, v8::internal::Isolate*) [node]10: 0x7f20326653f6 Aborted 这是 ChatGPT 的回答 试了前两种方法，似乎只有第一种 NODE_OPTIONS=\"--max-old-space-size=4096\" npm run build 有用","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://pologue.github.io/tags/node-js/"},{"name":"n","slug":"n","permalink":"http://pologue.github.io/tags/n/"},{"name":"vite","slug":"vite","permalink":"http://pologue.github.io/tags/vite/"},{"name":"npm","slug":"npm","permalink":"http://pologue.github.io/tags/npm/"}]},{"title":"记一次惊险的乱折腾","slug":"记一次惊险的乱折腾","date":"2024-05-10T16:07:10.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/05/11/记一次惊险的乱折腾/","permalink":"http://pologue.github.io/2024/05/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%83%8A%E9%99%A9%E7%9A%84%E4%B9%B1%E6%8A%98%E8%85%BE/","excerpt":"","text":"开头 事情的起因是我想玩玩一个 魔改的pvz ，但是卡巴斯基报毒说有木马。为了安全起见，我想试一试用前段时间装的 Sandboxie 来运行一下。因为不会设置隔离的沙盒，搞到一般就放弃了。(后面的问题可能是这里修改了注册表的什么地方吧) 中间 然后我想看一看数据库实验的手册，结果 Microsoft 365 报 0x426-0x0 的错误码。我看了 这 几 篇 帖子，装了个 Microsoft Support and Recovery Assistant (没有什么用)，打算卸载了重新安装。结果这个 Assistant 卸载了老半天还没卸载完，我就中途取消了。 而后我把沙盒的设置修改回去了，启用了 MS ClickToRun 的服务，还有 Windows Module Installer 服务。然后把 Office 365 卸载了，又在微软商店装了回来。尝试打开文档，还是失败了。 然后我看到了 这个 教程，想试一下 msconfig 里面的“诊断启动”，导致了今天最惊险的情况😇。电脑启动后唯二的两种登录方式都不可用了：人脸和 PIN 码（选择 PIN 会弹出一个弹窗问你是否从商店里安装一个什么，有点太幽默了点）。电脑险些直接变成薄薄的板砖。 结果 多次物理重启后，我根据 教程 进入恢复环境，把 Utilman.exe 换成 cmd.exe，重启后点右下角的小人就打开了 cmd，再打开 msconfig 改成正常启动，再重启就恢复正常了。 最后 Office 是根据 教程 在 官网 重新安装好了。Office 已卸载的时候搜索 WINWORD 可以找到在 C:\\Program Files\\Microsoft Office\\root\\Office16 的疑似本体的文件。","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"http://pologue.github.io/tags/Windows/"},{"name":"Sandboxie","slug":"Sandboxie","permalink":"http://pologue.github.io/tags/Sandboxie/"},{"name":"Office","slug":"Office","permalink":"http://pologue.github.io/tags/Office/"}]},{"title":"在WSL中使用“cygpath”","slug":"在WSL中使用“cygpath”","date":"2024-03-29T15:50:34.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/03/29/在WSL中使用“cygpath”/","permalink":"http://pologue.github.io/2024/03/29/%E5%9C%A8WSL%E4%B8%AD%E4%BD%BF%E7%94%A8%E2%80%9Ccygpath%E2%80%9D/","excerpt":"","text":"因为想把电脑上的一些图片转成 ASCII 图片， 在复制 Windows 的文件地址到 WSL 上时， 没有找到像 cygpath 这样的工具， 所以我在 .zshrc 里加了下面的内容： 12345# cygpath-like funcw2nix(){ echo \"$1\" | sed -e 's/\\\\/\\//g' -e 's/E:/\\/mnt\\/e/g'} 在我想把这件事写进 blog 时， 我又发现我的 hexo 命令找不到了。 一番排查后发现是 nvm 修改系统变量的时候连着 node_global 也给改掉了。蒸 🦐 头 参考链接 Linux技巧：sed命令替换、删除、同时匹配多个模式的方法 zsh自定义命令并传递参数","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://pologue.github.io/tags/Linux/"},{"name":"WSL","slug":"WSL","permalink":"http://pologue.github.io/tags/WSL/"}]},{"title":"在 Hexo 中显示公式","slug":"在hexo中显示公式","date":"2024-03-13T11:34:40.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/03/13/在hexo中显示公式/","permalink":"http://pologue.github.io/2024/03/13/%E5%9C%A8hexo%E4%B8%AD%E6%98%BE%E7%A4%BA%E5%85%AC%E5%BC%8F/","excerpt":"","text":"问题 尝试在 Hexo 中显示公式，采用了 pandoc + mathjax 的方法。 但是在下标中仍然不能有 # 或 \\# ，现在也没有找到解决办法 详细信息 安装的 node_modules : 123456789101112131415$ npm lshexo-site@0.0.0 E:\\Document\\Blog├── hexo-deployer-git@4.0.0├── hexo-filter-flowchart@1.0.4├── hexo-filter-mathjax@0.9.0├── hexo-generator-archive@2.0.0├── hexo-generator-category@2.0.0├── hexo-generator-index@3.0.0├── hexo-generator-tag@2.0.0├── hexo-renderer-ejs@2.0.0├── hexo-renderer-pandoc@0.4.0├── hexo-renderer-stylus@3.0.1├── hexo-server@3.0.0├── hexo-theme-next@8.19.2└── hexo@7.1.1 在 _config.yml 中添加: 123456789101112# Mathjaxmathjax: tags: none # or &#x27;ams&#x27; or &#x27;all&#x27; single_dollars: true # enable single dollar signs as in-line math delimiters cjk_width: 0.9 # relative CJK char width normal_width: 0.6 # relative normal (monospace) width append_css: true # add CSS to pages rendered by MathJax every_page: false # if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter packages: # extra packages to load extension_options: &#123;&#125; # you can put your extension options here # see http://docs.mathjax.org/en/latest/options/input/tex.html#tex-extension-options for more detail 通过 winget 安装了 pandoc 3.1.12.2","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://pologue.github.io/tags/Hexo/"}]},{"title":"在WSL中使用代理","slug":"在WSL中使用代理","date":"2024-03-10T03:06:05.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/03/10/在WSL中使用代理/","permalink":"http://pologue.github.io/2024/03/10/%E5%9C%A8WSL%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/","excerpt":"","text":"如果开启代理时打开 WSL ，会提示 “wsl: 检测到 localhost 代理配置，但未镜像到 WSL。NAT 模式下的 WSL 不支持 localhost 代理。” 参考链接 在 %USERHOME%/.wslconfig 中添加如下内容 123456[experimental]autoMemoryReclaim=gradual | dropcache | disablednetworkingMode=mirroreddnsTunneling=truefirewall=trueautoProxy=true","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"WSL","slug":"WSL","permalink":"http://pologue.github.io/tags/WSL/"}]},{"title":"关系代数的!=和÷","slug":"关系代数的不等于和除法","date":"2024-03-06T10:21:29.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/03/06/关系代数的不等于和除法/","permalink":"http://pologue.github.io/2024/03/06/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E7%9A%84%E4%B8%8D%E7%AD%89%E4%BA%8E%E5%92%8C%E9%99%A4%E6%B3%95/","excerpt":"","text":"例题 有三个表 学生 课程 选课。 检索不学 C2 课的学生姓名，年龄 检索学习全部课程的学生学号 笔记 错误的做法是 这意味着检索出“选了不是 C2 的课程”的学生姓名、年龄，而非所有学生中“没有选 C2 课程”的学生 正确的做法是 错误的做法是 这意味着检索出“学习全部课程且成绩相同”的学生学号，因为 S 和 Grade 共同作为除法“ ”中的 正确的做法是","categories":[{"name":"笔记","slug":"笔记","permalink":"http://pologue.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"关系代数","slug":"关系代数","permalink":"http://pologue.github.io/tags/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/"},{"name":"数据库","slug":"数据库","permalink":"http://pologue.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Kali Linux VMware 网络配置","slug":"Kali-Linux-VMware-网络配置","date":"2024-03-03T08:34:59.000Z","updated":"2024-10-10T14:01:29.635Z","comments":true,"path":"2024/03/03/Kali-Linux-VMware-网络配置/","permalink":"http://pologue.github.io/2024/03/03/Kali-Linux-VMware-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"VMware 版本：16.2.4 Pro Kali pre-built 版本：Kali Rolling (2023.4) x64 因为之前配 Ubuntu 的网络的时候就有点抓瞎，所以这次打算把配置过程稍微记录下来，免得再把头搞大。之前我是用 iso 安装了 kali ，因为当时没想到还有直接下载虚拟机的，后来感觉 pre-built 的启动更快一点，键盘鼠标输入也更流畅，就把之前的删掉了。 基本配置 Kali可以手动配置网络，也可以让NetworkManager(命令有 nmcli 和 nmtui )自动配置。默认的配置文件是 /etc/network/interfaces ，nm的配置文件是 /etc/NetworkManger/NetworkManager.conf 。 据我观察kali应该就只有 networking.service 和 NetworkManager.service 两个服务是跟网络相关的，不过前者是 actived(exited) 状态，后者是 actived(running) 状态。我猜 networking 应该就是管那个 interfaces 的服务。 /etc/network/interfaces默认配置： 12345auto loiface lo inet loopback# auto eth0# iface eth0 inet dhcp /etc/NetworkManager/NetworkManager.conf 默认配置： 12345[main]plugins=ifupdown,keyfile[ifupdown]managed=false 因为 managed 默认为 false ，nm 不会接管 interfaces 中已经配置的接口，所以 interfaces 中只需要写 loopback 的内容。如果把 interfaces 中 eth0 的配置取消注释，右上角的网络小图标会显示没有网络，但是此时是可以上网的。 我的虚拟机的网卡名字叫 eth0 ，对应 mac 地址是 VMware 虚拟机设置 -&gt; 网络适配器 -&gt; 高级 的 mac 地址。不管连接模式是 nat 还是 bridge ，到虚拟机中对应的都是同一个有线连接。如果有移动网卡就可以通过 虚拟机 -&gt; 可移动设备 给虚拟机用，可以连接周围的 WiFi 。 如果修改了虚拟机的 permanent mac ， nm 的 networking 这一项就会关闭，导致 lo 和 eth0 两个网卡都是 strictly unmanaged 状态，只需要输入 nmcli n on 把 networking 打开就好了。 nm 还需要设置 connection ，一般一个 device 设置一个就好了，因为不能同时开启 (不确定有多个网卡是什么情况) 。通过 nmtui 或者 kali 桌面的 Advanced Network Configuration 设置都可以， nmcli 也可以，不过不太方便。 连接校园网 WHU校园网登录认证 WHU校园网自助服务 因为校园网需要在网页上认证，所以在桥接模式下，虽然我的虚拟机可以 ping 到物理机，但是无法上网。要在虚拟机上使用校园网，需要把 mac 地址改成物理机用来上网的无线网卡的地址 (比如我的网卡是 Intel(R) Wi-Fi 6 AX201 160MHz) ，桥接模式下面 \"复制物理网络连接状态\" 的选项似乎选不选都可以。虚拟机成功登录校园网后，物理机是没法正常上网的状态，将虚拟机挂起可以恢复。 其他 /sys/class/net/ 下可以看到网卡的名字 lspci 和 lsusb 可以查看 pci 和 usb 设备 macchanger 可以改变网卡的 mac 地址，不过好像不能改 permanent mac sudo systemctl restart networking 重启 networking.service sudo systemctl restart NetworkManager 重启 NetworkManager.service","categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://pologue.github.io/tags/Linux/"},{"name":"VMware","slug":"VMware","permalink":"http://pologue.github.io/tags/VMware/"}]}],"categories":[{"name":"配置","slug":"配置","permalink":"http://pologue.github.io/categories/%E9%85%8D%E7%BD%AE/"},{"name":"Crypto","slug":"Crypto","permalink":"http://pologue.github.io/categories/Crypto/"},{"name":"笔记","slug":"笔记","permalink":"http://pologue.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://pologue.github.io/tags/Linux/"},{"name":"WSL","slug":"WSL","permalink":"http://pologue.github.io/tags/WSL/"},{"name":"WSLg","slug":"WSLg","permalink":"http://pologue.github.io/tags/WSLg/"},{"name":"Typora","slug":"Typora","permalink":"http://pologue.github.io/tags/Typora/"},{"name":"IDA","slug":"IDA","permalink":"http://pologue.github.io/tags/IDA/"},{"name":"AES","slug":"AES","permalink":"http://pologue.github.io/tags/AES/"},{"name":"VMware","slug":"VMware","permalink":"http://pologue.github.io/tags/VMware/"},{"name":"node.js","slug":"node-js","permalink":"http://pologue.github.io/tags/node-js/"},{"name":"n","slug":"n","permalink":"http://pologue.github.io/tags/n/"},{"name":"vite","slug":"vite","permalink":"http://pologue.github.io/tags/vite/"},{"name":"npm","slug":"npm","permalink":"http://pologue.github.io/tags/npm/"},{"name":"Windows","slug":"Windows","permalink":"http://pologue.github.io/tags/Windows/"},{"name":"Sandboxie","slug":"Sandboxie","permalink":"http://pologue.github.io/tags/Sandboxie/"},{"name":"Office","slug":"Office","permalink":"http://pologue.github.io/tags/Office/"},{"name":"Hexo","slug":"Hexo","permalink":"http://pologue.github.io/tags/Hexo/"},{"name":"关系代数","slug":"关系代数","permalink":"http://pologue.github.io/tags/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0/"},{"name":"数据库","slug":"数据库","permalink":"http://pologue.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}